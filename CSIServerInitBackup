"""
System Backup Script
This Bash script provides an automated solution for backing up important system files and directories. It creates backups of flat files, configurations, and installations, organizing them by timestamped directories to maintain a clean historical record.

Requirements
Bash Shell
tar command utility
find command utility
apt-clone (for Debian-based systems)
Installation
No installation of the script itself is required, but ensure that apt-clone is installed for backing up installed packages. If not already installed, the script will attempt to install it automatically.

Configuration
Set the Backup Destination:
Define the environment variable BACKUPD to specify the destination directory for backups:
bash
Copy code
export BACKUPD="/path/to/your/backup/directory"
Script Permissions:
Ensure the script has execute permissions:
bash
Copy code
chmod +x <script-name>.sh
Usage
Execute the script from the terminal:

bash
Copy code
./<script-name>.sh
What the Script Does:
Directories and Files Backup: Creates backups of specified directories (/home/csi/, /opt/, /usr/local/bin/) using tar with high compression.
Configuration Files: Copies .conf files from /etc into the backup directory.
Package List Backup: Uses apt-clone to clone the list of installed packages.
Command Log Backup: If existing, backs up the command log from /var/log/commands.log.
Bash Configurations: Copies bash-related configuration files from /etc/skel and /etc.
Output
The script outputs the completion status and the location of the backup directory. All backups are timestamped to facilitate easy tracking and restoration.

Error Handling
Dependency Checks: Ensures apt-clone is installed before attempting to back up package lists. If not found, it attempts to install it.
Backup Failures: The script checks for the existence of directories before attempting to back them up to prevent errors.
Future Enhancements
Extended Compatibility: Add support for other package managers like yum or dnf for non-Debian based distributions.
Automated Restoration: Script options to facilitate easy restoration from a specified backup.
Logging: Implement logging functionality to capture all actions and outcomes for audit and troubleshooting purposes.
This README.md explains how to configure, execute, and understand the script's operations, ensuring users can effectively utilize it for system backups. It also suggests future improvements to enhance the script's functionality and usability.
"""





#!/bin/bash

# Define backup destination directory
backup_dir="$BACKUPD"

# Create a timestamp for the backup directory
timestamp=$(date +"%Y%m%d%H%M%S")
backup_directory="${backup_dir}/backup_${timestamp}"

# Create the backup directory
mkdir -p "${backup_directory}"

# Backup flat files and directories with high compression
tar -czvf "${backup_directory}/csi.tar.gz" /home/csi/

# Backup configuration files ending with .conf
find /etc -type f -name "*.conf" -exec cp {} "${backup_directory}" \;

# Backup files and directories in /opt/
tar -czvf "${backup_directory}/opt_backup.tar.gz" /opt/

# Backup files and directories in /usr/local/bin/
tar -czvf "${backup_directory}/usr_local_bin_backup.tar.gz" /usr/local/bin/

# Check if apt-clone is installed
if ! command -v apt-clone &> /dev/null; then
    echo "apt-clone not found. Installing..."
    sudo apt-get install apt-clone -y
fi

# Backup currently installed and properly configured apps using apt-clone
apt-clone clone "${backup_directory}/apt-clone"

echo "Backup Completed Successfully To $BACKUPD"


# Backup bash history if /var/log/commands.log exists and is not empty
commands_log="/var/log/commands.log"
if [[ -f "${commands_log}" && -s "${commands_log}" ]]; then
    cp "${commands_log}" "${backup_directory}/commands.log"
fi



# Backup bash-related configuration files
cp /etc/bash.bashrc "${backup_directory}/bash.bashrc"
cp /etc/profile "${backup_directory}/profile"
cp /etc/skel/.bashrc "${backup_directory}/skel_bashrc"
cp /etc/skel/.bash_profile "${backup_directory}/skel_bash_profile"
cp /etc/skel/.bash_aliases "${backup_directory}/skel_bash_aliases"
cp /etc/skel/.bash_functions "${backup_directory}/skel_bash_functions"

# Check if apt-clone is installed
if ! command -v apt-clone &> /dev/null; then
    echo "apt-clone not found. Installing..."
    sudo apt-get install apt-clone -y
fi
