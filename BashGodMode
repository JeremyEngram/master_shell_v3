"""
It seems like you're aiming to script a robust system configuration for Linux distributions like Ubuntu, particularly for setting up an environment focused on OSINT (Open Source Intelligence) and information gathering. Your script incorporates several advanced features including:

Automated configuration of user environments:
Sets ownership and executable permissions for directories and scripts.
Creates symlinks in the user's home directory for easy access.
Integration with GitHub to fetch relevant tools:
Utilizes the GitHub API to search and list repositories.
Clones selected repositories into a designated directory.
Automatic installation of dependencies and configuration:
Finds and installs requirements from requirements.txt.
Executes setup scripts if present.
Enhanced user interface and accessibility:
Generates desktop icons for applications.
Parses README.md files to generate summaries and integrates them into manual pages and bash aliases for quick command access.
Here are a few enhancements and considerations for your script:

Validation and Error Handling: It would be beneficial to add error handling to ensure that each command executes successfully. This can be done by checking the exit status of commands ($?) and providing user feedback or corrective actions if something fails.
Security Concerns: Automatically downloading and running scripts from GitHub can pose security risks. Consider implementing a verification step where scripts are reviewed or checksum verified before execution.
Performance Optimization: Instead of using multiple find commands, you might streamline operations that process directory contents, possibly by storing results in variables and reusing them.
User Interaction: While your script provides prompts for user input, you could enhance user interaction by incorporating a menu-driven interface using tools like dialog or whiptail to make it more user-friendly.
Documentation and Help: Including inline comments or a detailed help section that explains each part of the script would make it easier for others (or future you) to understand and modify it as needed.
"""

#!/bin/bash

echo "The following is a global system configuration standard for Linux based distrobutions such as Ubuntu. These configurations in part help to maintain continutiy of the base system.";
echo "They are as follows, user defined username, /opt and /var/www/html directories are added to the username defined path for execution of custom installed packages and scripts as well as default write user access to apache web-server document root.";
echo "Referencable preinstalled custom bash .sh or python .py scripts created symlinks are implemented right into the user's home directory for quick and easy access. These can be removed later by the user as desktop icons for each script are autogenerated also";
echo "Mext a recursive function apt automatically searches github for bash AND/OR python repositories related to OSINT, information gathering and investgations tools. An aggregated list is then printed to the screen for review by the user while the systm waits for further input.";
echo "The user then can decide to or not to implement any or all of those repositiories by copying and pasting all of them or line by line with one space denoting seperate repositories then being passed off to a function that will iterate each repo for pip requirements.txt files";
echo "If python or bash related install scripts are found after the face they are execute recursively after successful pip implementations. -> Next another recursive function iterates over each repo implementation to generate executable autostart desktop application icons so that any of them can be used and executed standaline on the fly. " 
echo "A for loop function then iterates ALL README.md files in each directory outputting a general usage summary for the user on-screen as it finishes up, while sourcing those same details to man pages and ~/.bashrc_aliases and sourcing that file for alias execution in other manual or automated use cases.";

echo "Finally, a function call from the global configuration script will be made to the main user select interface prompting for a minimal interaction fully automated information gathering and reporting framework."; /n 


read -p "YOUR USERNAME:> " USR
sudo chown -R $USR /opt
PATH=$PATH:~/opt
PATH=$PATH:/home/$USR
sudo chmod +x /opt/*.sh && sudo chmod +x /opt/*.py
find /opt -type f -name "*.sh" -exec ln -s {} ./ \;
find /opt -type f -name "*.py" -exec ln -s {} ./ \;



# Search Github API repositories with the keywords "information gathering"
url="https://api.github.com/search/repositories?q=information+gathering+language:bash"

response=$(curl -s "$url")

titles=$(echo "$response" | jq -r '.items[].name')
descriptions=$(echo "$response" | jq -r '.items[].description')
urls=$(echo "$response" | jq -r '.items[].html_url')

for i in "${!titles[@]}"
do
  printf "%s\n%s\n%s\n\n" "${titles[$i]}" "${descriptions[$i]}" "${urls[$i]}"
done




read -p "Enter a list of Github repository URLs (separated by spaces): " -a urls


for url in "${urls[@]}"
do
  sudo git clone "$url" "/opt/$(basename $url .git)"
done

find /opt -name "requirements.txt" -execdir sudo -H pip3 install -r {} \;
find /opt -name "setup.py" -o -name "install.py" -execdir sudo -H python3 {} install \;


# PRINT SOME OUTPUT VALIDATING SUCCESSFUL IMPLEMENTATION AND PROMPT USER FOR FURTHER INTERACTION WITH THE TOOLS THEMSELVES


username="$USR"
groupname="www-data"

if [ -d /var/www/html ]; then
  # Add the user to the group
  sudo usermod -a -G "$groupname" "$username"
  sudo chmod 775 /var/www/html
  sudo chown -R www-data:"$groupname" /var/www/html
else
  echo "/var/www/html directory not found"
fi


desktop_dir="$HOME/Desktop/"

for file in /opt/*.{sh,py}; do

  name="$(basename "$file" | cut -d. -f1)"
  
  echo "[Desktop Entry]
Type=Application
Encoding=UTF-8
Name=$name
Comment=
Exec=$file
Icon=
Terminal=true
Categories=Application;Development;" > "$desktop_dir/$name.desktop"
  
  chmod +x "$desktop_dir/$name.desktop"
done




for dir in /opt/*/; do
 
  if [[ -f "$dir/README.md" ]]; then

    echo "Contents of $dir/README.md:"
    cat "$dir/README.md"
    echo ""
  fi
done



aliases_file="$HOME/.bashrc_aliases"


for dir in /opt/*/; do

  if [[ -f "$dir/README.md" ]]; then
    while read line; do
      if [[ "$line" == *"```"* ]]; then

        command=$(echo "$line" | sed -n 's/.*```\(.*\)\( | .*\)\{0,1\}$/\1/p')
        alias_name=$(basename "$command")
        alias_command="alias $alias_name=\"$command\""

        echo "$alias_command" >> "$aliases_file"
      fi
    done < "$dir/README.md"
  fi
done

source .bashrc_aliases
echo ""




#!/bin/bash

# This script configures a Linux system (Ubuntu) for OSINT and information gathering tools.
# It sets up user environment, fetches tools from GitHub, and provides easy access via desktop icons and aliases.

# Function to display an error message and exit
error_exit() {
    echo "$1" 1>&2
    exit 1
}

# Basic setup: user-defined username, setting permissions, and creating necessary directories
read -p "Enter your username: " USR
sudo chown -R $USR /opt || error_exit "Error setting ownership of /opt"
export PATH=$PATH:/opt:/home/$USR
sudo chmod +x /opt/*.sh /opt/*.py || error_exit "Error setting executable permissions"

# Creating symlinks for scripts in the home directory for easy access
find /opt -type f \( -name "*.sh" -o -name "*.py" \) -exec ln -s {} ~/ \; || error_exit "Error creating symlinks"

# Function to search and list GitHub repositories related to information gathering
search_github() {
    echo "Searching GitHub for repositories..."
    local url="https://api.github.com/search/repositories?q=information+gathering+language:bash+language:python&sort=stars"
    local response=$(curl -s "$url") || error_exit "Error fetching data from GitHub"

    echo "$response" | jq -r '.items[] | "\(.name)\n\(.description)\n\(.html_url)\n"' || error_exit "Error processing GitHub data"
}

# Function to clone repositories and handle installation
clone_and_setup() {
    read -p "Enter a list of GitHub repository URLs (separated by spaces): " -a urls

    for url in "${urls[@]}"; do
        local repo_dir="/opt/$(basename $url .git)"
        sudo git clone "$url" "$repo_dir" || error_exit "Error cloning $url"
        sudo find "$repo_dir" -name "requirements.txt" -execdir sudo -H pip3 install -r {} \;
        sudo find "$repo_dir" -name "setup.py" -execdir sudo -H python3 {} install \;
    done
}

# Function to create desktop icons
create_desktop_icons() {
    local desktop_dir="$HOME/Desktop/"
    mkdir -p "$desktop_dir"
    for file in /opt/*.{sh,py}; do
        local name="$(basename "$file" .${file##*.})"
        cat > "$desktop_dir/$name.desktop" <<EOF
[Desktop Entry]
Type=Application
Encoding=UTF-8
Name=$name
Exec=$file
Terminal=true
Categories=Application;Development;
EOF
        chmod +x "$desktop_dir/$name.desktop"
    done
}

# Function to handle README.md files and aliases
process_readme_files() {
    local aliases_file="$HOME/.bashrc_aliases"
    touch "$aliases_file"

    for dir in /opt/*/; do
        if [[ -f "$dir/README.md" ]]; then
            echo "Contents of $dir/README.md:"
            cat "$dir/README.md"
            while read line; do
                if [[ "$line" == *"```"* ]]; then
                    local command=$(echo "$line" | sed -n 's/.*```\(.*\)\( | .*\)\{0,1\}$/\1/p')
                    local alias_name=$(basename "$command")
                    echo "alias $alias_name=\"$command\"" >> "$aliases_file"
                fi
            done < "$dir/README.md"
        fi
    done
    source "$aliases_file"
}

# Main execution flow
echo "Starting system configuration..."
search_github
clone_and_setup
create_desktop_icons
process_readme_files
echo "Configuration completed successfully."
