#!/bin/bash

# Display banner
echo "INIT FIRST INSTALL"
echo
echo "FULL SYSTEM FIRST TIME INSTALL OF ALL USER PREFERENCES AND CONFIGURATIONS"
echo

 # VERIFY ROOT ->; OR Exit; Check if the script is run by root
if [ "$(id -u)" != "0" ]; then
echo "This script must be run as root"
exit 1
fi


# set universal hostname
sudo hostnamectl set $hostname; read

apt install avahi-daemon



# set static ip address


# if ping hostname matches static ip then ssh possible by hostname
ping $hostname >> /dev/null


# implement gui-based logging with glogg 
apt install glogg

# rsyslog implementation


# enable rpi usb-otg modes 


# create desktop icons


# install snap and riseup-vpn
apt install snap snapd && snap install riseup-vpn --classic || echo "snap was unable to install riseup-vpn, versions do not match - removing snap for now" && apt remove --purge snap && apt autoremove && apt clean;


# make original backups of all system conf files




# implement aliases and bash command functions into backend while indexing man pages
cp .bashrc .bashrc.bak  && echo 'copied backup of .bashrc.bak.orig and gitting current aliasmaster repo' git clone https://github.com/JeremyEngram/aliasmaster /tmp/aliasmaster/ && mv /tmp/aliasmaster/ ~/ || ls 


# implement custom .bashrc features and functions
wget https://github.com/JeremyEngram/master-bash/blob/main/init.Mbashrc | bash 
chmod +x https://github.com/JeremyEngram/master-bash/blob/main/init.Mbashrc; rm -rf init.Mbashrc; echo 'removed init.Mbashrc implementation file...'


sudo apt install python python2 python3 python3-pip openssh-server sshfs apt-clone


 # Create log directories and custom logs
mkdir -p /var/log/nmap
chmod 777 /var/log/nmap
touch /var/log/apt/search.log /var/log/apt/show.log /var/log/apt/implemented.log
chown $USER:$USER /var/log/apt/search.log /var/log/apt/show.log /var/log/apt/implemented.log
chmod 777 /var/log/apt/search.log /var/log/apt/show.log /var/log/apt/implemented.log


 # Install awesome github optional packages into linux framework
wget -qO - https://raw.githubusercontent.com/shinokada/awesome/main/install | bash -s install
export PATH=$HOME/.local/share/bin/awesome:$PATH
. ~/.zshrc
. ~/.bashrc



awesome -v && awesome update awesome

# Installing a repo using user/repo
awesome install shinokada/gitstart
# Installing a repo using user/repo.git
awesome install shinokada/gitstart.git
# Installing a repo whose main script is different from the repo name
awesome install raylee/tldr-sh-client tldr
# Same as above but using https
awesome install https://github.com/shinokada/cleanit
awesome install https://github.com/raylee/tldr-sh-client tldr
# Installing a repo using install option instead of -i
awesome install https://github.com/shinokada/gitstart.git

awesome install https://github.com/JeremyEngram/esptool-gui.git
awesome install https://github.com/JeremyEngram/linux-research-tools
awesome install https://github.com/JeremyEngram/easybashgui.git

awesome ls 
awesome update all


 # Create symbolic links to /usr/local/bin/
ln -s /opt/* /usr/local/bin/*
ln -s /usr/local/bin/* /home/$USER/



# Git init installer scripts temporarily on system call
git clone https://github.com/JeremyEngram/init.scripts.git /tmp/; ls /tmp/init.scripts.git || chmod +x /tmp/init.scripts/*; echo "init scripts temp armed for install..."; done




 # Disable apport
systemctl stop apport
sed -i 's/enabled=1/enabled=0/g' /etc/default/apport



 # Full system update and upgrade
echo "Full System Update & Upgrade"
apt update && apt upgrade -y && apt autoremove -y; echo

 # Minimize window launchers on click
gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize'

 # Take ownership of commonly used system folders
echo "Taking Full Ownership Of System Directories"
chown $USER /opt /usr/local/bin /var/www/html


Install zeit and ubuntu-clean
add-apt-repository -y ppa:blaze/main
add-apt-repository -y ppa:gerardpuig/ppa
apt update
apt install -y zeit ubuntu-cleaner



Install Git and clone master_shell repository
echo "Implementing Github Master_Shell Scripts"
apt install -y git
cd /usr/local/bin
git clone https://github.com/JeremyEngram/master_shell.git
git clone https://github.com/JeremyEngram/master_shell_v2.git
git clone git clone https://github.com/JeremyEngram/master_shell_v3.git
mv /usr/local/bin/master_shell/* /usr/local/bin/
rm -rf /usr/local/bin/master_shell/


# Implementing temp install of shelldump script repos to tmp
git clone https://github.com/JeremyEngram/shelldump.git /tmp
git clone https://github.com/JeremyEngram/shelldump2.git



# Implementing temp install of researchlab settings
git clone https://github.com/JeremyEngram/researchlab.git /tmp



# Make all custom scripts executable
echo "Arming All Custom Scripts For Use... ARMED!"
chmod +x /usr/local/bin/*
chmod +x /opt/*/*.sh/
chmod +x /opt/*/*.py
echo




Install packages using tasksel
echo "Implementing Full Custom Packages Install... WAIT FOR IT!"
echo "taskel" "taskel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" | xargs -I {} sh -c "tasksel --task-packages {} --interactive"
echo



# Install extra system packages supporting filesystem, partition, mounting, formatting  
apt install -y terminator ntfs-3g exfat-fuse exfat-utils libcanberra-gtk-module banner



# Implement Arduino microcontroller and driver support for common arduino wireless boards esp8266 esp32 usb2uart support chp310 ftdi usb2ttl drivers
apt install arduino; 
awesome alias esptool install https://github.com/JeremyEngram/esptool-gui



# Install VNC server
sudo apt-get install -y xfce4 xfce4-goodies tightvncserver

# Configure VNC server
vncserver
vncserver -kill :1
mv ~/.vnc/xstartup ~/.vnc/xstartup.bak
echo "#!/bin/bash" >> ~/.vnc/xstartup
echo "xrdb /home/$(whoami)/.Xresources" >> ~/.vnc/xstartup
echo "startxfce4 &" >> ~/.vnc/xstartup
chmod +x ~/.vnc/xstartup




# Install SSHFS
sudo apt-get install -y sshfs

# Copy all scripts from /usr/local/bin on existing host to another host
EXISTING_HOST="existing-host"
NEW_HOST="new-host"
SCRIPTS_DIR="/usr/local/bin"
ssh $EXISTING_HOST "tar czf - $SCRIPTS_DIR" | ssh $NEW_HOST "tar xzf - -C /"




# Install ChatGPT dependencies
sudo apt-get update
sudo apt-get install build-essential cmake git libboost-all-dev zlib1g-dev liblzma-dev libgoogle-perftools-dev libgflags-dev libprotobuf-dev protobuf-compiler libgrpc-dev libgrpc++-dev libcurl4-openssl-dev libssl-dev libz-dev -y



# Clone ChatGPT repository
git clone https://github.com/finetuneanon/ChatGPT.git

# Build ChatGPT
cd ChatGPT
mkdir build && cd build
cmake ..
make

# Test ChatGPT
./chatgpt

# Optionally install ChatGPT system-wide
sudo make install




Display completion message
echo "INIT FIRST INSTALL COMPLETED"
