#!/bin/bash

# Display banner
echo "INIT FIRST INSTALL"
echo
echo "FULL SYSTEM FIRST TIME INSTALL OF ALL USER PREFERENCES AND CONFIGURATIONS"
echo

 # VERIFY ROOT ->; OR Exit; Check if the script is run by root
if [ "$(id -u)" != "0" ]; then
echo "This script must be run as root"
exit 1
fi


# set universal hostname
read -p "Enter the new hostname: " hostname && sudo hostnamectl set-hostname "$hostname"

# make system use hostnames to connect via ssh
apt install avahi-daemon



# set static ip address
# Set the static IP address, netmask, gateway, and DNS server
ifconfig eth0 192.168.1.100 netmask 255.255.255.0 up
route add default gw 192.168.1.1
echo "nameserver 8.8.8.8" > /etc/resolv.conf

# Save the settings to the network interface configuration file
echo "auto eth0" > /etc/network/interfaces
echo "iface eth0 inet static" >> /etc/network/interfaces
echo "address 192.168.1.100" >> /etc/network/interfaces
echo "netmask 255.255.255.0" >> /etc/network/interfaces
echo "gateway 192.168.1.1" >> /etc/network/interfaces
echo "dns-nameservers 8.8.8.8" >> /etc/network/interfaces

# Restart the network interface to apply the new settings
/etc/init.d/networking restart


# if ping hostname matches static ip then ssh possible by hostname
ping -c 1 $hostname > /dev/null 2>&1


# implement gui-based logging with glogg 
apt install glogg




# rsyslog implementation
# Install rsyslog
sudo apt-get update
sudo apt-get install -y rsyslog

# Configure rsyslog
sudo sed -i 's/#\$ModLoad imudp/\$ModLoad imudp/' /etc/rsyslog.conf
sudo sed -i 's/#\$UDPServerRun 514/\$UDPServerRun 514/' /etc/rsyslog.conf
sudo systemctl restart rsyslog.service

# Enable rsyslog service to start at boot
sudo systemctl enable rsyslog.service

echo "rsyslog installed and configured successfully"




# enable rpi usb-otg modes 





# create desktop icons
# Define the path to the scripts directory
scripts_dir="/usr/local/bin"

# Define the path to the desktop directory
desktop_dir="$HOME/Desktop"

# Loop through all scripts in the directory
for script in $(find "$scripts_dir" -type f -executable); do
    # Get the script name without the path or extension
    script_name="$(basename "$script" | sed 's/\..*$//')"

    # Create a desktop file for the script
    desktop_file="$desktop_dir/$script_name.desktop"
    echo "[Desktop Entry]
    Version=1.0
    Type=Application
    Name=$script_name
    Comment=$script_name
    Exec=$script
    Icon=utilities-terminal
    Terminal=false
    Categories=Utility;" > "$desktop_file"
    
    # Set the file permissions for the desktop file
    chmod +x "$desktop_file"
done

echo "Desktop icons created successfully"






# implement install and enable services with status reports, if service status is not enabled then systemctl enable $srv.service
apt install -y apache2 mariadb-server && service --status-all | grep "[+]" | $(printf 'active services'); systemctl status $srv.service
systemctl enable *.service


# install snap and riseup-vpn
apt install snap snapd && snap install riseup-vpn --classic || echo "snap was unable to install riseup-vpn, versions do not match - removing snap for now" && apt remove --purge snap && apt autoremove && apt clean;


# make original backups of all system conf files
sudo find /etc -name '*.conf' -print0 | xargs -0 -I {} sh -c 'cp {} {}.bak'




# implement aliases and bash command functions into backend while indexing man pages
cp .bashrc .bashrc.bak  && echo 'copied backup of .bashrc.bak.orig and gitting current aliasmaster repo' git clone https://github.com/JeremyEngram/aliasmaster /tmp/aliasmaster/ && mv /tmp/aliasmaster/ ~/ || ls 


# implement custom .bashrc features and functions
wget https://github.com/JeremyEngram/master-bash/blob/main/init.Mbashrc | bash 
chmod +x https://github.com/JeremyEngram/master-bash/blob/main/init.Mbashrc; rm -rf init.Mbashrc; echo 'removed init.Mbashrc implementation file...'


sudo apt install python python2 python3 python3-pip openssh-server sshfs apt-clone


 # Create log directories and custom logs
mkdir -p /var/log/nmap
chmod 777 /var/log/nmap
touch /var/log/apt/search.log /var/log/apt/show.log /var/log/apt/implemented.log
chown $USER:$USER /var/log/apt/search.log /var/log/apt/show.log /var/log/apt/implemented.log
chmod 777 /var/log/apt/search.log /var/log/apt/show.log /var/log/apt/implemented.log




# Define the list of allowed hosts and hostnames
allowed_hosts=("192.168.1.1" "192.168.1.255")
allowed_hostnames=("datacenter" "masterclient")

# Backup the original sshd_config file
sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak

# Allow SSH access from specified hosts
for host in "${allowed_hosts[@]}"; do
    sudo sed -i "/^#AllowUsers/a AllowUsers *@$host" /etc/ssh/sshd_config
done

# Allow SSH access from specified hostnames
for hostname in "${allowed_hostnames[@]}"; do
    sudo sed -i "/^#AllowUsers/a AllowUsers *@$hostname" /etc/ssh/sshd_config
done

# Restart the SSH service to apply the changes
sudo systemctl restart sshd.service

echo "SSH access configured successfully"





# Edit /etc/hosts - Define the list of new hostnames and IP addresses to add to hosts config file
new_entries=(
    "192.168.1.64   datacenter.lan    dc1"
    "192.168.1.159   srv2.datacenter.lan    dc2"
)

# Backup the original hosts file
sudo cp /etc/hosts /etc/hosts.bak

# Add new entries to the hosts file
for entry in "${new_entries[@]}"; do
    echo "$entry" | sudo tee -a /etc/hosts > /dev/null
done

echo "Hosts file configured successfully"




# SSH HOST KEY GEN FOR ONE TIME LOGIN - Define the remote server address and username
remote_host="dc1.datacenter.lan"
remote_user="research"

# Generate a new SSH key pair (if necessary)
if [ ! -f ~/.ssh/id_rsa.pub ]; then
    ssh-keygen -t rsa -N "" -f ~/.ssh/id_rsa
fi

# Copy the public key to the remote server
ssh-copy-id -i ~/.ssh/id_rsa.pub $remote_user@$remote_host

# Temporarily disable password authentication on the remote server
ssh $remote_user@$remote_host "sudo sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config && sudo systemctl restart sshd.service"

echo "SSH key-based authentication configured successfully. You can now log in to $remote_host as $remote_user without a password."




 # Install awesome github optional packages into linux framework
wget -qO - https://raw.githubusercontent.com/shinokada/awesome/main/install | bash -s install
export PATH=$HOME/.local/share/bin/awesome:$PATH
. ~/.zshrc
. ~/.bashrc


# IMPLEMENT AND USE AWESOME GIT SCRIPT PACKAGE MANAGER
awesome -v && awesome update awesome

# Installing a repo using user/repo
awesome install shinokada/gitstart
# Installing a repo using user/repo.git
awesome install shinokada/gitstart.git
# Installing a repo whose main script is different from the repo name
awesome install raylee/tldr-sh-client tldr
# Same as above but using https
awesome install https://github.com/shinokada/cleanit
awesome install https://github.com/raylee/tldr-sh-client tldr
# Installing a repo using install option instead of -i
awesome install https://github.com/shinokada/gitstart.git

awesome install https://github.com/JeremyEngram/esptool-gui.git
awesome install https://github.com/JeremyEngram/linux-research-tools
awesome install https://github.com/JeremyEngram/easybashgui.git
awesome install https://github.com/JeremyEngram/linux-tweaks.git

awesome https://github.com/JeremyEngram/generate-and-send-ssh-key.git

cd generate-and-send-ssh-key
./generate-and-send-ssh-key.sh --user $USER --host $hostname

awesome ls 
awesome update all

awesome install https://github.com/JeremyEngram/cronauto.git


awesome install https://github.com/imjeffparedes/iot-esp8266-arduino-interface.git


# Security & Pentesting Tools Resources 
awesome install https://github.com/stormshadow07/HackTheWorld.git


 # Create symbolic links to /usr/local/bin/
ln -s /opt/* /usr/local/bin/*
ln -s /usr/local/bin/* /home/$USER/



# Git init installer scripts temporarily on system call
git clone https://github.com/JeremyEngram/init.scripts.git /tmp/; ls /tmp/init.scripts.git || chmod +x /tmp/init.scripts/*; echo "init scripts temp armed for install..."; done

git clone https://github.com/JeremyEngram/MyPyScripts.git


 # Disable apport
systemctl stop apport
sed -i 's/enabled=1/enabled=0/g' /etc/default/apport



 # Full system update and upgrade
echo "Full System Update & Upgrade"
apt update && apt upgrade -y && apt autoremove -y; echo

 # Minimize window launchers on click
gsettings set org.gnome.shell.extensions.dash-to-dock click-action 'minimize'

 # Take ownership of commonly used system folders
echo "Taking Full Ownership Of System Directories"
chown $USER /opt /usr/local/bin /var/www/html


Install Zeit and ubuntu-clean
add-apt-repository -y ppa:blaze/main
add-apt-repository -y ppa:gerardpuig/ppa
apt update
apt install -y zeit ubuntu-cleaner
apt install -y bleachbit







# Install Git and clone master_shell repository
echo "Implementing Github Master_Shell Scripts"
apt install -y git
cd /usr/local/bin
git clone https://github.com/JeremyEngram/master_shell.git
git clone https://github.com/JeremyEngram/master_shell_v2.git
git clone git clone https://github.com/JeremyEngram/master_shell_v3.git
mv /usr/local/bin/master_shell/* /usr/local/bin/
rm -rf /usr/local/bin/master_shell/


# Implementing temp install of shelldump script repos to tmp
git clone https://github.com/JeremyEngram/shelldump.git /tmp
git clone https://github.com/JeremyEngram/shelldump2.git /tmp



# Implementing temp install of researchlab settings
git clone https://github.com/JeremyEngram/researchlab.git /tmp



# Make all custom scripts executable
echo "Arming All Custom Scripts For Use... ARMED!"
chmod +x /usr/local/bin/*
chmod +x /opt/*/*.sh/
chmod +x /opt/*/*.py





Install packages using tasksel
echo "Implementing Full Custom Packages Install... WAIT FOR IT!"
echo "taskel" "taskel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" "tasksel" | xargs -I {} sh -c "tasksel --task-packages {} --interactive"
echo



# Install extra system packages supporting filesystem, partition, mounting, formatting  
apt install -y terminator ntfs-3g exfat-fuse exfat-utils libcanberra-gtk-module banner



# Implement Arduino microcontroller and driver support for common arduino wireless boards esp8266 esp32 usb2uart support chp310 ftdi usb2ttl drivers
apt install arduino; 
awesome alias esptool install https://github.com/JeremyEngram/esptool-gui



# Install VNC server
# Set the download URL and file name
download_url="https://www.realvnc.com/download/file/vnc.files/VNC-Server-6.8.0-Linux-x64.deb"
filename="VNC-Server-6.8.0-Linux-x64.deb"

# Download the file using wget
wget -O "$filename" "$download_url"

# Get VNC Viewer
curl https://downloads.realvnc.com/download/file/viewer.files/VNC-Viewer-7.0.1-$(whoami).deb | dpkg -i

# Install VNC to linux manually if site's .deb install fails
sudo apt-get install -y xfce4 xfce4-goodies tightvncserver

# Configure VNC server
vncserver
vncserver -kill :1
mv ~/.vnc/xstartup ~/.vnc/xstartup.bak
echo "#!/bin/bash" >> ~/.vnc/xstartup
echo "xrdb /home/$(whoami)/.Xresources" >> ~/.vnc/xstartup
echo "startxfce4 &" >> ~/.vnc/xstartup
chmod +x ~/.vnc/xstartup




# Install SSHFS
apt-get install -y sshfs

# Copy all scripts from /usr/local/bin on existing host to another host
EXISTING_HOST="existing-host"
NEW_HOST="new-host"
SCRIPTS_DIR="/usr/local/bin"
ssh $EXISTING_HOST "tar czf - $SCRIPTS_DIR" | ssh $NEW_HOST "tar xzf - -C /"




# Install ChatGPT dependencies
sudo apt-get update
sudo apt-get install build-essential cmake git libboost-all-dev zlib1g-dev liblzma-dev libgoogle-perftools-dev libgflags-dev libprotobuf-dev protobuf-compiler libgrpc-dev libgrpc++-dev libcurl4-openssl-dev libssl-dev libz-dev -y



# Clone ChatGPT repository
git clone https://github.com/finetuneanon/ChatGPT.git

# Build ChatGPT
cd ChatGPT
mkdir build && cd build
cmake ..
make

# Test ChatGPT
./chatgpt

# Optionally install ChatGPT system-wide
sudo make install



wget https://github.com/imjeffparedes/iot-esp8266-arduino-interface/archive/refs/heads/master.zip -o iot-esp8266-arduino-interface.zip
wget https://github.com/Isaranu/Arduino-send-data-over-WiFi-to-Android/archive/refs/heads/master.zip -o Arduino-send-data-over-WiFi-to-Android.zip
wget https://github.com/delf1980/ESP8266_PHP_Webserver/archive/refs/heads/master.zip -o ESP8266_PHP_Webserver.zip


# Creating cold-site apt-system backup
apt-clone clone --backup $hostname-apt-clone.bak && echo 'sudo apt-clone --restore $hostname-apt-clone.bak'


# SHOWTIME all available implemented resources 
alias | tee -a /home/$USER/



# Define remote host and directory
REMOTE_HOST="192.168.1.232"
REMOTE_DIR="/"

# Define remote user
REMOTE_USER="jeremy"


# Define local mount point
LOCAL_MOUNT_POINT="/home/research/refuge"

# Define SSH key file (optional)
SSH_KEY_FILE="~/.ssh/id_rsa.pub"

# Create local mount point directory if it doesn't exist
if [ ! -d "$LOCAL_MOUNT_POINT" ]; then
    mkdir -p "$LOCAL_MOUNT_POINT"
fi



# Create local mount point directory if it doesn't exist
if [ ! -d "$LOCAL_MOUNT_POINT" ]; then
    mkdir -p "$LOCAL_MOUNT_POINT"
fi

# Mount remote directory using sshfs with alternate user
if [ -n "$SSH_KEY_FILE" ]; then
    sshfs -o IdentityFile="$SSH_KEY_FILE" "$REMOTE_USER"@"$REMOTE_HOST":"$REMOTE_DIR" "$LOCAL_MOUNT_POINT"
else
    sshfs "$REMOTE_USER"@"$REMOTE_HOST":"$REMOTE_DIR" "$LOCAL_MOUNT_POINT"
fi

# Add mount point to /etc/fstab so it will be mounted on future reboots
echo "sshfs#$REMOTE_HOST:$REMOTE_DIR $LOCAL_MOUNT_POINT fuse defaults,user,idmap=user 0 0" | sudo tee -a /etc/fstab > /dev/null





Display completion message
echo "INIT FIRST INSTALL COMPLETED"
